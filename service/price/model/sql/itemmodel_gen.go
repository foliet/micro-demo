// Code generated by goctl. DO NOT EDIT!

package sql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	itemFieldNames          = builder.RawFieldNames(&Item{})
	itemRows                = strings.Join(itemFieldNames, ",")
	itemRowsExpectAutoSet   = strings.Join(stringx.Remove(itemFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	itemRowsWithPlaceHolder = strings.Join(stringx.Remove(itemFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDemoItemIdPrefix       = "cache:demo:item:id:"
	cacheDemoItemShopIdIdPrefix = "cache:demo:item:shopId:id:"
)

type (
	itemModel interface {
		Insert(ctx context.Context, data *Item) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Item, error)
		FindOneByShopIdId(ctx context.Context, shopId int64, id int64) (*Item, error)
		Update(ctx context.Context, data *Item) error
		Delete(ctx context.Context, id int64) error
	}

	defaultItemModel struct {
		sqlc.CachedConn
		table string
	}

	Item struct {
		Id       int64     `db:"id"`
		CreateAt time.Time `db:"create_at"`
		ShopId   int64     `db:"shop_id"`
	}
)

func newItemModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultItemModel {
	return &defaultItemModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`item`",
	}
}

func (m *defaultItemModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	demoItemIdKey := fmt.Sprintf("%s%v", cacheDemoItemIdPrefix, id)
	demoItemShopIdIdKey := fmt.Sprintf("%s%v:%v", cacheDemoItemShopIdIdPrefix, data.ShopId, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, demoItemIdKey, demoItemShopIdIdKey)
	return err
}

func (m *defaultItemModel) FindOne(ctx context.Context, id int64) (*Item, error) {
	demoItemIdKey := fmt.Sprintf("%s%v", cacheDemoItemIdPrefix, id)
	var resp Item
	err := m.QueryRowCtx(ctx, &resp, demoItemIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", itemRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultItemModel) FindOneByShopIdId(ctx context.Context, shopId int64, id int64) (*Item, error) {
	demoItemShopIdIdKey := fmt.Sprintf("%s%v:%v", cacheDemoItemShopIdIdPrefix, shopId, id)
	var resp Item
	err := m.QueryRowIndexCtx(ctx, &resp, demoItemShopIdIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `shop_id` = ? and `id` = ? limit 1", itemRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, shopId, id); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultItemModel) Insert(ctx context.Context, data *Item) (sql.Result, error) {
	demoItemIdKey := fmt.Sprintf("%s%v", cacheDemoItemIdPrefix, data.Id)
	demoItemShopIdIdKey := fmt.Sprintf("%s%v:%v", cacheDemoItemShopIdIdPrefix, data.ShopId, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, itemRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.ShopId)
	}, demoItemIdKey, demoItemShopIdIdKey)
	return ret, err
}

func (m *defaultItemModel) Update(ctx context.Context, newData *Item) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	demoItemIdKey := fmt.Sprintf("%s%v", cacheDemoItemIdPrefix, data.Id)
	demoItemShopIdIdKey := fmt.Sprintf("%s%v:%v", cacheDemoItemShopIdIdPrefix, data.ShopId, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, itemRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ShopId, newData.Id)
	}, demoItemIdKey, demoItemShopIdIdKey)
	return err
}

func (m *defaultItemModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDemoItemIdPrefix, primary)
}

func (m *defaultItemModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", itemRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultItemModel) tableName() string {
	return m.table
}
