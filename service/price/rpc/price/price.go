// Code generated by goctl. DO NOT EDIT!
// Source: price.proto

package price

import (
	"context"

	"demo/service/price/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddSubscribeRequest    = pb.AddSubscribeRequest
	Empty                  = pb.Empty
	ItemInfo               = pb.ItemInfo
	ListSubscribeRequest   = pb.ListSubscribeRequest
	ListSubscribeResponse  = pb.ListSubscribeResponse
	QuerySubscribeRequest  = pb.QuerySubscribeRequest
	QuerySubscribeResponse = pb.QuerySubscribeResponse
	Subscribe              = pb.Subscribe

	Price interface {
		AddSubscribe(ctx context.Context, in *AddSubscribeRequest, opts ...grpc.CallOption) (*Empty, error)
		ListSubscribe(ctx context.Context, in *ListSubscribeRequest, opts ...grpc.CallOption) (*ListSubscribeResponse, error)
		QuerySubscribe(ctx context.Context, in *QuerySubscribeRequest, opts ...grpc.CallOption) (*QuerySubscribeResponse, error)
	}

	defaultPrice struct {
		cli zrpc.Client
	}
)

func NewPrice(cli zrpc.Client) Price {
	return &defaultPrice{
		cli: cli,
	}
}

func (m *defaultPrice) AddSubscribe(ctx context.Context, in *AddSubscribeRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewPriceClient(m.cli.Conn())
	return client.AddSubscribe(ctx, in, opts...)
}

func (m *defaultPrice) ListSubscribe(ctx context.Context, in *ListSubscribeRequest, opts ...grpc.CallOption) (*ListSubscribeResponse, error) {
	client := pb.NewPriceClient(m.cli.Conn())
	return client.ListSubscribe(ctx, in, opts...)
}

func (m *defaultPrice) QuerySubscribe(ctx context.Context, in *QuerySubscribeRequest, opts ...grpc.CallOption) (*QuerySubscribeResponse, error) {
	client := pb.NewPriceClient(m.cli.Conn())
	return client.QuerySubscribe(ctx, in, opts...)
}
