// Code generated by goctl. DO NOT EDIT!
// Source: price.proto

package price

import (
	"context"

	"demo/service/price/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty            = pb.Empty
	ItemInfo         = pb.ItemInfo
	ItemInfos        = pb.ItemInfos
	SubscribeRequest = pb.SubscribeRequest
	UserId           = pb.UserId

	Price interface {
		Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Empty, error)
		ItemInfo(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ItemInfos, error)
	}

	defaultPrice struct {
		cli zrpc.Client
	}
)

func NewPrice(cli zrpc.Client) Price {
	return &defaultPrice{
		cli: cli,
	}
}

func (m *defaultPrice) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := pb.NewPriceClient(m.cli.Conn())
	return client.Subscribe(ctx, in, opts...)
}

func (m *defaultPrice) ItemInfo(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ItemInfos, error) {
	client := pb.NewPriceClient(m.cli.Conn())
	return client.ItemInfo(ctx, in, opts...)
}
